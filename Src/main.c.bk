#include "stm32f10x.h"
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "stm32f10x_usart.h"
#include "stm32f10x_i2c.h"
#include "delay.h"
#include "USART.h"
#include "I2C.h"

//переменные для LCD
uint8_t _Addr = 0x27;
uint8_t _cols = 20;
uint8_t _rows = 4;
uint8_t _backlightval = 0x08;
uint8_t _displayfunction;
uint8_t _displaycontrol;
uint8_t _displaymode;



void LCD_begin(uint8_t cols, uint8_t lines);

void LCD_init_priv(uint8_t cols, uint8_t rows)
{
    init_I2C1(); // Wire.begin();

	_displayfunction = 0;//LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	LCD_begin(_cols, _rows);
}

void expanderWrite(uint8_t _data){
	I2C_StartTransmission (I2C1, I2C_Direction_Transmitter ,_Addr);
	I2C_WriteData(I2C1, (int)(_data) | _backlightval);
	I2C_GenerateSTOP(I2C1, ENABLE); //Wire.endTransmission();
}

void pulseEnable(uint8_t _data){
	expanderWrite(_data | En);	// En high
	DelayMC(1);		// enable pulse must be >450ns

	expanderWrite(_data & ~En);	// En low
	DelayMC(50);		// commands need > 37us to settle
}


void write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

// write either command or data
void LCD_send(uint8_t value, uint8_t mode) {
	uint8_t highnib=value&0xf0;
	uint8_t lownib=(value<<4)&0xf0;
    write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}


void command(uint8_t value) {
	LCD_send(value, 0);
}


void display() {
	_displaycontrol |= LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}


void LCD_clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	DelayMC(50000);  // this command takes a long time!
}

void home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	DelayMC(30000);  // this command takes a long time!
}

void LCD_begin(uint8_t cols, uint8_t lines) {//} , uint8_t dotsize) {
	if (lines > 1) {
		_displayfunction |= LCD_2LINE;
	}
	_rows = lines;
    _cols = cols;

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	Delay(50);
    Usart1_Send_String("End5");

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
	Delay(1000);
    Usart1_Send_String("End1");

  	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03 << 4);
    DelayMC(4500); // wait min 4.1ms
//    Usart1_Send_String("End2");

    // second try
    write4bits(0x03 << 4);
    DelayMC(4500); // wait min 4.1ms
  //  Usart1_Send_String("End3");

    // third go!
    write4bits(0x03 << 4);
    DelayMC(150);
    //Usart1_Send_String("End4");

    // finally, set to 4-bit interface
    write4bits(0x02 << 4);
    //Usart1_Send_String("End5");

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    Usart1_Send_String("End2");

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
	display();

	// clear it off
	LCD_clear();

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();

}


void LCD_write(uint8_t value) {
	LCD_send(value, Rs);
}

//Функция передачи строки через USART
void LCD_write_String(char* str)
{
  uint8_t i=0;
  while(str[i])
  {
    LCD_write(str[i]);
    i++;
  }
}

void LCD_setCursor(uint8_t col, uint8_t row){
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > _rows ) {
		row = _rows-1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}


int main()
{
  Init(); //Вызов функции инициализации периферии

   uint8_t data;
    //дождались команды и начали работу
  while(1)
  {
    if((USART1->SR & USART_SR_RXNE)) //Проверяем поступление данных от компьютера
    {
      data = USART1->DR; //Считываем принятые данные
    //  Usart1_Send_symbol(data); //И тут же отсылаем их обратно
      break;
    }
  }
  Usart1_Send_String("Start");

  LCD_init_priv(20,4);
  // ------- Quick 3 blinks of backlight  -------------
  int i;
  for( i = 0; i< 3; i++)
  {
    backlight();
    Delay(250);
    noBacklight();
    Delay(250);
  }
  backlight(); // finish with backlight on


  LCD_write(53);
  Usart1_Send_String("End");
  Delay(2000);
  LCD_clear();
  LCD_write(50);
  LCD_write(53);
  LCD_write_String("Hello");
  // I2C_GenerateSTOP(I2Cx, ENABLE);

//стартуем экран
//пока просто проверка, потом перенесём в библиотеку


}
